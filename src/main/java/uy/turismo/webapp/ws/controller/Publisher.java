
package uy.turismo.webapp.ws.controller;

import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebResult;
import jakarta.jws.WebService;
import jakarta.jws.soap.SOAPBinding;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.ws.Action;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.0.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Publisher", targetNamespace = "controller")
@SOAPBinding(style = SOAPBinding.Style.RPC)
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Publisher {


    /**
     * 
     * @return
     *     returns controller.DtProviderWSArray
     */
    @WebMethod
    @WebResult(name = "providerList", partName = "providerList")
    @Action(input = "controller/Publisher/getProviderListRequest", output = "controller/Publisher/getProviderListResponse")
    public DtProviderWSArray getProviderList();

    /**
     * 
     * @param userPassword
     * @param userEmail
     * @return
     *     returns controller.DtUserWS
     */
    @WebMethod
    @WebResult(name = "userData", partName = "userData")
    @Action(input = "controller/Publisher/checkCredentialsRequest", output = "controller/Publisher/checkCredentialsResponse")
    public DtUserWS checkCredentials(
        @WebParam(name = "userEmail", partName = "userEmail")
        String userEmail,
        @WebParam(name = "userPassword", partName = "userPassword")
        String userPassword);

    /**
     * 
     * @param nickname
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(name = "existsNick", partName = "existsNick")
    @Action(input = "controller/Publisher/existsNickRequest", output = "controller/Publisher/existsNickResponse")
    public boolean existsNick(
        @WebParam(name = "nickname", partName = "nickname")
        String nickname);

    /**
     * 
     * @param email
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(name = "existsEmail", partName = "existsEmail")
    @Action(input = "controller/Publisher/existsEmailRequest", output = "controller/Publisher/existsEmailResponse")
    public boolean existsEmail(
        @WebParam(name = "email", partName = "email")
        String email);

    /**
     * 
     * @param name
     * @param entity
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(name = "existsName", partName = "existsName")
    @Action(input = "controller/Publisher/existsNameRequest", output = "controller/Publisher/existsNameResponse")
    public boolean existsName(
        @WebParam(name = "name", partName = "name")
        String name,
        @WebParam(name = "entity", partName = "entity")
        EntityType entity);

    /**
     * 
     * @param strToFind
     * @return
     *     returns controller.DtBaseEntityWSArray
     */
    @WebMethod
    @WebResult(name = "activityAndBundle", partName = "activityAndBundle")
    @Action(input = "controller/Publisher/filterByStringRequest", output = "controller/Publisher/filterByStringResponse")
    public DtBaseEntityWSArray filterByString(
        @WebParam(name = "strToFind", partName = "strToFind")
        String strToFind);

    /**
     * 
     * @return
     *     returns controller.DtUserWSArray
     */
    @WebMethod
    @WebResult(name = "userList", partName = "userList")
    @Action(input = "controller/Publisher/getListUserRequest", output = "controller/Publisher/getListUserResponse")
    public DtUserWSArray getListUser();

    /**
     * 
     * @return
     *     returns controller.DtTouristWSArray
     */
    @WebMethod
    @WebResult(name = "touristList", partName = "touristList")
    @Action(input = "controller/Publisher/getTouristListRequest", output = "controller/Publisher/getTouristListResponse")
    public DtTouristWSArray getTouristList();

    /**
     * 
     * @param userId
     * @return
     *     returns controller.DtUserWS
     */
    @WebMethod
    @WebResult(name = "userData", partName = "userData")
    @Action(input = "controller/Publisher/getUserDataRequest", output = "controller/Publisher/getUserDataResponse")
    public DtUserWS getUserData(
        @WebParam(name = "userId", partName = "userId")
        long userId);

    /**
     * 
     * @param userData
     */
    @WebMethod
    @Action(input = "controller/Publisher/updateUserRequest", output = "controller/Publisher/updateUserResponse")
    public void updateUser(
        @WebParam(name = "userData", partName = "userData")
        DtUserWS userData);

    /**
     * 
     * @param userFollwer
     * @param userToFollow
     */
    @WebMethod
    @Action(input = "controller/Publisher/followUserRequest", output = "controller/Publisher/followUserResponse")
    public void followUser(
        @WebParam(name = "userFollwer", partName = "userFollwer")
        long userFollwer,
        @WebParam(name = "userToFollow", partName = "userToFollow")
        long userToFollow);

    /**
     * 
     * @param userToUnfollow
     * @param userFollwer
     */
    @WebMethod
    @Action(input = "controller/Publisher/unFollowUserRequest", output = "controller/Publisher/unFollowUserResponse")
    public void unFollowUser(
        @WebParam(name = "userFollwer", partName = "userFollwer")
        long userFollwer,
        @WebParam(name = "userToUnfollow", partName = "userToUnfollow")
        long userToUnfollow);

    /**
     * 
     * @param activityToMark
     * @param userId
     */
    @WebMethod
    @Action(input = "controller/Publisher/markFavoriteActivtyRequest", output = "controller/Publisher/markFavoriteActivtyResponse")
    public void markFavoriteActivty(
        @WebParam(name = "userId", partName = "userId")
        long userId,
        @WebParam(name = "activityToMark", partName = "activityToMark")
        long activityToMark);

    /**
     * 
     * @param userId
     * @param activityToUnmark
     */
    @WebMethod
    @Action(input = "controller/Publisher/unMarkFavoriteActivityRequest", output = "controller/Publisher/unMarkFavoriteActivityResponse")
    public void unMarkFavoriteActivity(
        @WebParam(name = "userId", partName = "userId")
        long userId,
        @WebParam(name = "activityToUnmark", partName = "activityToUnmark")
        long activityToUnmark);

    /**
     * 
     * @param userData
     */
    @WebMethod
    @Action(input = "controller/Publisher/registerUserRequest", output = "controller/Publisher/registerUserResponse")
    public void registerUser(
        @WebParam(name = "userData", partName = "userData")
        DtUserWS userData);

    /**
     * 
     * @param activityData
     */
    @WebMethod
    @Action(input = "controller/Publisher/registeTouristicActivityRequest", output = "controller/Publisher/registeTouristicActivityResponse")
    public void registeTouristicActivity(
        @WebParam(name = "activityData", partName = "activityData")
        DtTouristicActivityWS activityData);

    /**
     * 
     * @param departureData
     */
    @WebMethod
    @Action(input = "controller/Publisher/registerTouristicDepartureRequest", output = "controller/Publisher/registerTouristicDepartureResponse")
    public void registerTouristicDeparture(
        @WebParam(name = "departureData", partName = "departureData")
        DtTouristicDepartureWS departureData);

    /**
     * 
     * @param bundleData
     */
    @WebMethod
    @Action(input = "controller/Publisher/registerTouristicBundleRequest", output = "controller/Publisher/registerTouristicBundleResponse")
    public void registerTouristicBundle(
        @WebParam(name = "bundleData", partName = "bundleData")
        DtTouristicBundleWS bundleData);

    /**
     * 
     * @param departmentData
     */
    @WebMethod
    @Action(input = "controller/Publisher/registerDepartmentRequest", output = "controller/Publisher/registerDepartmentResponse")
    public void registerDepartment(
        @WebParam(name = "departmentData", partName = "departmentData")
        DtDepartmentWS departmentData);

    /**
     * 
     * @param inscriptionData
     */
    @WebMethod
    @Action(input = "controller/Publisher/registerInscriptionRequest", output = "controller/Publisher/registerInscriptionResponse")
    public void registerInscription(
        @WebParam(name = "inscriptionData", partName = "inscriptionData")
        DtInscriptionWS inscriptionData);

    /**
     * 
     * @param categoryData
     */
    @WebMethod
    @Action(input = "controller/Publisher/registerCategoryRequest", output = "controller/Publisher/registerCategoryResponse")
    public void registerCategory(
        @WebParam(name = "categoryData", partName = "categoryData")
        DtCategoryWS categoryData);

    /**
     * 
     * @param purchaseData
     */
    @WebMethod
    @Action(input = "controller/Publisher/registerPurchaseRequest", output = "controller/Publisher/registerPurchaseResponse")
    public void registerPurchase(
        @WebParam(name = "purchaseData", partName = "purchaseData")
        DtPurchaseWS purchaseData);

    /**
     * 
     * @param withActivities_003f
     * @return
     *     returns controller.DtDepartmentWSArray
     */
    @WebMethod
    @WebResult(name = "departmentsList", partName = "departmentsList")
    @Action(input = "controller/Publisher/getListDepartmentRequest", output = "controller/Publisher/getListDepartmentResponse")
    public DtDepartmentWSArray getListDepartment(
        @WebParam(name = "withActivities?", partName = "withActivities?")
        boolean withActivities_003f);

    /**
     * 
     * @param activityId
     * @return
     *     returns controller.DtTouristicActivityWS
     */
    @WebMethod
    @WebResult(name = "activityData", partName = "activityData")
    @Action(input = "controller/Publisher/getTouristicActivityDataRequest", output = "controller/Publisher/getTouristicActivityDataResponse")
    public DtTouristicActivityWS getTouristicActivityData(
        @WebParam(name = "activityId", partName = "activityId")
        long activityId);

    /**
     * 
     * @param activityId
     * @return
     *     returns controller.DtTouristicDepartureWSArray
     */
    @WebMethod
    @WebResult(name = "departuresByActivity", partName = "departuresByActivity")
    @Action(input = "controller/Publisher/getDeparturesByActivityRequest", output = "controller/Publisher/getDeparturesByActivityResponse")
    public DtTouristicDepartureWSArray getDeparturesByActivity(
        @WebParam(name = "activityId", partName = "activityId")
        long activityId);

    /**
     * 
     * @return
     *     returns controller.DtTouristicDepartureWSArray
     */
    @WebMethod
    @WebResult(name = "departuresList", partName = "departuresList")
    @Action(input = "controller/Publisher/getListTouristicDepartureRequest", output = "controller/Publisher/getListTouristicDepartureResponse")
    public DtTouristicDepartureWSArray getListTouristicDeparture();

    /**
     * 
     * @return
     *     returns controller.DtTouristicBundleWSArray
     */
    @WebMethod
    @WebResult(name = "bundleList", partName = "bundleList")
    @Action(input = "controller/Publisher/getListTouristicBundleRequest", output = "controller/Publisher/getListTouristicBundleResponse")
    public DtTouristicBundleWSArray getListTouristicBundle();

    /**
     * 
     * @param bundleId
     * @return
     *     returns controller.DtTouristicBundleWS
     */
    @WebMethod
    @WebResult(name = "bundleList", partName = "bundleList")
    @Action(input = "controller/Publisher/getTouristicBundleDataRequest", output = "controller/Publisher/getTouristicBundleDataResponse")
    public DtTouristicBundleWS getTouristicBundleData(
        @WebParam(name = "bundleId", partName = "bundleId")
        long bundleId);

    /**
     * 
     * @param activityId
     * @param bundleId
     */
    @WebMethod
    @Action(input = "controller/Publisher/addTouristicActivityToBundleRequest", output = "controller/Publisher/addTouristicActivityToBundleResponse")
    public void addTouristicActivityToBundle(
        @WebParam(name = "bundleId", partName = "bundleId")
        long bundleId,
        @WebParam(name = "activityId", partName = "activityId")
        long activityId);

    /**
     * 
     * @param departureId
     * @return
     *     returns controller.DtTouristicDepartureWS
     */
    @WebMethod
    @WebResult(name = "departureData", partName = "departureData")
    @Action(input = "controller/Publisher/getTouristicDepartureDataRequest", output = "controller/Publisher/getTouristicDepartureDataResponse")
    public DtTouristicDepartureWS getTouristicDepartureData(
        @WebParam(name = "departureId", partName = "departureId")
        long departureId);

    /**
     * 
     * @return
     *     returns controller.DtCategoryWSArray
     */
    @WebMethod
    @WebResult(name = "categoryList", partName = "categoryList")
    @Action(input = "controller/Publisher/getListCategoryRequest", output = "controller/Publisher/getListCategoryResponse")
    public DtCategoryWSArray getListCategory();

    /**
     * 
     * @param activityId
     * @param activityState
     */
    @WebMethod
    @Action(input = "controller/Publisher/changeActivityStateRequest", output = "controller/Publisher/changeActivityStateResponse")
    public void changeActivityState(
        @WebParam(name = "activityId", partName = "activityId")
        long activityId,
        @WebParam(name = "activityState", partName = "activityState")
        ActivityState activityState);

    /**
     * 
     * @param activityState
     * @return
     *     returns controller.DtTouristicActivityWSArray
     */
    @WebMethod
    @WebResult(name = "activitiesByState", partName = "activitiesByState")
    @Action(input = "controller/Publisher/getListActivityStatedRequest", output = "controller/Publisher/getListActivityStatedResponse")
    public DtTouristicActivityWSArray getListActivityStated(
        @WebParam(name = "activityState", partName = "activityState")
        ActivityState activityState);

    /**
     * 
     * @param purchaseId
     * @return
     *     returns controller.DtPurchaseWS
     */
    @WebMethod
    @WebResult(name = "purchaseData", partName = "purchaseData")
    @Action(input = "controller/Publisher/getPurchaseRequest", output = "controller/Publisher/getPurchaseResponse")
    public DtPurchaseWS getPurchase(
        @WebParam(name = "purchaseId", partName = "purchaseId")
        long purchaseId);

    /**
     * 
     * @return
     *     returns controller.DtPurchaseWSArray
     */
    @WebMethod
    @WebResult(name = "purchaseList", partName = "purchaseList")
    @Action(input = "controller/Publisher/getPurchaseListRequest", output = "controller/Publisher/getPurchaseListResponse")
    public DtPurchaseWSArray getPurchaseList();

}
